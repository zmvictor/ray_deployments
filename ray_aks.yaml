# Make sure to increase resource requests and limits before using this example in production.
# For examples with more realistic resource configuration, see
# ray-cluster.complete.large.yaml and
# ray-cluster.autoscaler.large.yaml.
apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: sd-sample
spec:
  serviceUnhealthySecondThreshold: 1200 # Config for the health check threshold for service. Default value is 60.
  deploymentUnhealthySecondThreshold: 1200 # Config for the health check threshold for deployments. Default value is 60.
  serveConfig:
    importPath: api_ingress.entrypoint
    runtimeEnv: |
      {"working_dir": "https://github.com/zmvictor/ray_deployments/archive/refs/tags/0.4.zip", "pip": ["ray[serve]", "requests", "torch", "diffusers", "transformers", "accelerate"]}
    deployments:
      - name: StableDiffusionV2
        autoscalingConfig: |
          {"minReplicas": 1, "maxReplicas": 3}
        rayActorOptions:
          numCpus: 4
          numGpus: 1
      - name: APIIngress
        autoscalingConfig: |
          {"minReplicas": 2, "maxReplicas": 4}
        rayActorOptions:
          numCpus: 4
  rayClusterConfig:
    rayVersion: "2.5.0"
    enableInTreeAutoscaling: true
    # autoscalerOptions is an OPTIONAL field specifying configuration overrides for the Ray autoscaler.
    # The example configuration shown below below represents the DEFAULT values.
    # (You may delete autoscalerOptions if the defaults are suitable.)
    autoscalerOptions:
      # upscalingMode is "Default" or "Aggressive."
      # Conservative: Upscaling is rate-limited; the number of pending worker pods is at most the size of the Ray cluster.
      # Default: Upscaling is not rate-limited.
      # Aggressive: An alias for Default; upscaling is not rate-limited.
      upscalingMode: Default
      # idleTimeoutSeconds is the number of seconds to wait before scaling down a worker pod which is not using Ray resources.
      idleTimeoutSeconds: 60
      # image optionally overrides the autoscaler's container image.
      # If instance.spec.rayVersion is at least "2.0.0", the autoscaler will default to the same image as
      # the ray container by. For older Ray versions, the autoscaler will default to using the Ray 2.0.0 image.
      ## image: "my-repo/my-custom-autoscaler-image:tag"
      # imagePullPolicy optionally overrides the autoscaler container's default image pull policy (IfNotPresent).
      imagePullPolicy: IfNotPresent
      # Optionally specify the autoscaler container's securityContext.
      securityContext: {}
      env: []
      envFrom: []
      # resources specifies optional resource request and limit overrides for the autoscaler container.
      # For large Ray clusters, we recommend monitoring container resource usage to determine if overriding the defaults is required.
      resources:
        limits:
          cpu: "500m"
          memory: "512Mi"
        requests:
          cpu: "500m"
          memory: "512Mi"
    headGroupSpec:
      serviceType: ClusterIP # optional
      # the following params are used to complete the ray start: ray start --head --block --redis-port=6379 ...
      rayStartParams:
        port: '6379' # should match container port named gcs-server
        dashboard-host: '0.0.0.0'
        num-cpus: '2' # can be auto-completed from the limits
        block: 'true'
      #pod template
      template:
        spec:
          containers:
            - name: ray-head
              image: dlisllm.azurecr.io/ray:2.5.0-py310-cpu
              resources:
                limits:
                  cpu: 6
                  memory: 24Gi
                requests:
                  cpu: 4
                  memory: 12Gi
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
    workerGroupSpecs:
    # the pod replicas in this group typed worker
    - replicas: 2
      minReplicas: 2
      maxReplicas: 10
      # logical group name, for this called small-group, also can be functional
      groupName: gpu-worker-group
      rayStartParams:
        block: 'true'
      #pod template
      template:
        spec:
          initContainers:
            # the env var $FQ_RAY_IP is set by the operator if missing, with the value of the head service name
            - name: init
              image: busybox:1.28
              command: ['sh', '-c', "until nslookup $RAY_IP.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for K8s Service $RAY_IP; sleep 2; done"]
          tolerations:
          - key: "sku"
            operator: "Equal"
            value: "gpu"
            effect: "NoSchedule"
          containers:
            - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
              image: dlisllm.azurecr.io/ray:2.5.0-py310-gpu
              lifecycle:
                preStop:
                  exec:
                    command: ["/bin/sh","-c","ray stop"]
              resources:
                limits:
                  cpu: "15"
                  memory: "240Gi"
                  nvidia.com/gpu: 4
                requests:
                  cpu: "15"
                  memory: "240Gi"
                  nvidia.com/gpu: 4
    headServiceAnnotations: {}
      # annotations passed on for the Head Service
      # service_key: "service_value"